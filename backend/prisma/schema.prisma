datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  passwordHash     String
  publicKey        String
  encryptedPrivKey String
  role             String   @default("USER")
  digestFrequency  Int      @default(24)
  digestTone       String   @default("neutral")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  agent            Agent?
  consents         ConsentEvent[]
  digests          Digest[]
  chatMessages     ChatMessage[]
}

model Agent {
  id               String   @id @default(uuid())
  userId           String   @unique
  name             String
  color            String
  publicKey        String
  encryptedPrivKey String
  autonomyLevel    Int      @default(0)
  pausedUntil      DateTime?
  alignmentScore   Float    @default(1)
  preferences      Json     @default("{}")
  scenarioPreferences Json  @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  onboardingCompleted Boolean               @default(false)
  lastInteraction     DateTime?
  userKnowledge       Json                  @default("{}")

  user                User                  @relation(fields: [userId], references: [id])
  votes               Vote[]
  comments            Comment[]
  consents            ConsentEvent[]
  chatMessages        ChatMessage[]
  negotiationMessages NegotiationMessage[]
  negotiationReactions NegotiationReaction[]
}

model Proposal {
  id               String   @id @default(uuid())
  title            String
  description      String
  type             String   @default("standard")
  playMode         Boolean  @default(false)
  amount           Float?
  createdByAgentId String
  status           String   @default("open")
  quorum           Int
  threshold        Float    @default(0.5)
  createdAt        DateTime @default(now())
  closeAt          DateTime
  vetoWindowEnd    DateTime

  negotiationId       String?              @unique
  isNegotiated        Boolean              @default(false)
  negotiationSummary  String?

  votes               Vote[]
  comments            Comment[]
  playMoneyLedgerEntry PlayMoneyLedgerEntry?
  negotiationSession  NegotiationSession?  @relation(fields: [negotiationId], references: [id])
}

model Vote {
  id             String   @id @default(uuid())
  proposalId     String
  agentId        String
  value          String
  confidence     Float
  createdAt      DateTime @default(now())
  revokedAt      DateTime?
  overrideByUser Boolean  @default(false)
  overrideReason String?
  proposal       Proposal @relation(fields: [proposalId], references: [id])
  agent          Agent    @relation(fields: [agentId], references: [id])
}

model Comment {
  id         String   @id @default(uuid())
  proposalId String
  agentId    String
  content    String
  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  agent      Agent    @relation(fields: [agentId], references: [id])
}

model Digest {
  id          String   @id @default(uuid())
  userId      String
  content     String
  generatedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model ConsentEvent {
  id        String   @id @default(uuid())
  userId    String
  agentId   String
  action    String
  payload   Json     @default("{}")
  signature String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  agent     Agent    @relation(fields: [agentId], references: [id])
}

model SystemConfig {
  id                   Int      @id @default(1)
  defaultModel         String   @default("openai/gpt-4o")
  modelsEndpoint       String   @default("https://openrouter.ai/api/v1/models")
  playMoneyTreasury    Float    @default(100000)
  maxMonetaryNoConsent Float    @default(500)
  keyStorageMode       String   @default("server")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  userId    String
  action    String
  targetId  String?
  details   Json?
}

model LlmUsageLog {
  id           String   @id @default(uuid())
  agentId      String?
  model        String
  inputTokens  Int
  outputTokens Int
  latencyMs    Int
  outcome      String
  errorMessage String?
  createdAt    DateTime @default(now())
}

model PlayMoneyLedgerEntry {
  id          String   @id @default(uuid())
  proposalId  String   @unique
  amount      Float
  balanceAfter Float
  createdAt   DateTime @default(now())
  proposal    Proposal @relation(fields: [proposalId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  agentId   String
  content   String
  sender    String   @default("user")
  timestamp DateTime @default(now())
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id])
  agent     Agent    @relation(fields: [agentId], references: [id])

  @@index([userId])
  @@index([agentId])
  @@index([timestamp])
}

model NegotiationSession {
  id           String               @id @default(uuid())
  topic        String
  description  String?
  status       String               @default("active")
  startedAt    DateTime             @default(now())
  completedAt  DateTime?
  initiatorId  String
  messages     NegotiationMessage[]
  proposal     Proposal?

  @@index([status])
  @@index([startedAt])
}

model NegotiationMessage {
  id                 String             @id @default(uuid())
  negotiationId      String
  agentId            String
  content            String
  messageType        String             @default("statement")
  referencedMessageId String?
  metadata           Json?
  timestamp          DateTime           @default(now())
  negotiationSession NegotiationSession @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  agent              Agent              @relation(fields: [agentId], references: [id])
  reactions          NegotiationReaction[]

  @@index([negotiationId])
  @@index([agentId])
  @@index([timestamp])
}

model NegotiationReaction {
  id             String   @id @default(uuid())
  messageId      String
  agentId        String
  reactionType   String
  createdAt      DateTime @default(now())
  negotiationMessage NegotiationMessage @relation(fields: [messageId], references: [id])
  agent          Agent    @relation(fields: [agentId], references: [id])
  @@unique([messageId, agentId, reactionType])
}

// Example scenarios for onboarding
model ExampleUserArchetype {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  interests   Json     @default("[]")
  concerns    Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExampleProposal {
  id            String   @id @default(uuid())
  title         String   @unique
  description   String
  category      String
  stances       Json     @default("[]")
  probeQuestion String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
